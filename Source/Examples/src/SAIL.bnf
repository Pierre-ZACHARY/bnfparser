<<module>> ::= 
    {{ <<declaration>> }}*

<<declaration>> ::=
    | <<struct-declaration>>
    | <<enum-declaration>>
    | <<method-declaration>>

<<struct-declaration>> ::=
    | struct lid {{ < {{ _list(uid) }}? > }}? { {{ _list(<<lid-type>>) }}? }

<<enum-declaration>> ::=
    | enum lid {{ < {{ _list(uid) }}? > }} ? { {{ _list(<<cons-def>>) }}? }

<<method-declaration> ::=
    | method lid ( {{ _list(<<lid-type>>) }}? ) { {{ <<statement>> }}? }

<<lid-type>> ::= lid : <<type>>

<<type>> ::=
    bool | int | float | char | string | id<type> | uid

<<cons-def>> ::=
    id {{ ( {{ list(<<type>>) }}? ) }}?

<<statement>> ::=
    | var {{ mut }}? lid : <<type>> {{ = <<expression>> }}?
    | signal lid
    | <<expression>> = <<expression>>
    | <<statement>> ; << statement>>
    | <<block-statement>> << statement>>
    | <<statement>> || <<statement>>
    | if ( <<expression>> ) <<statement>>
    | if ( <<expression>> ) <<statement>> else <<statement>>
    | while ( <<expression>> ) <<statement>>
    | case ( <<expression>> ) {_list(<<(case)>)>}
    | lid ( {{ _list(<<listexpression>>) }}? )
    | return {{ <<expression>> }} ?
    | emit id
    | when id <<statement>>
    | watch id <<statement>>
    | { {{ <<statement>> }} ? }

<<block-statement>> ::=
    | { {{ <<statement>> }} ? }
    | if ( <<expression>> ) { {{ <<statement>> }} ? }
    | if ( <<expression>> ) <<statement>> else { {{ <<statement>> }} ? }
    | while ( <<expression>> ) { {{ <<statement>> }} ? }
    | when (id) { {{ <<statement>> }} ? }
    | watch (id) { {{ <<statement>> }} ? }

<<pattern>> ::=
    lid | uid {{ ( {{ _list(<<pattern>>) }} ? ) }}?

<<case>> ::= <<pattern>> : <<statement>>

<<expression>> ::=
    | lid
    | <<bool>> | <<int>> | <<float>> | <<char>> | <<string>>
    | <<expression>>[<<expression>>]
    | <<expression>>.lid | ( <<expression>> )
    | <<unop>> <<expression>>
    | <<expression>> <<binop>> <<expression>>
    | & {{ mut }}? <<expression>>
    | * <<expression>>
    | [ {{ _list(<<expression>>) }} ?]
    | { {{ _list(<<field-expression>>) }}? }
    | Id {{ ( {{ _list(<<expression>>) }} ? ) }}?
    | id ( _list(<<expression-list>>)? )

<<field-expression>> ::= id : <<expression>>

<<unop>> ::= - | !

<<binop> ::= + | - | * | / | % | < | > | <= | >= | == | != | and | or

_list(x) = x | x, <<list>>(x)

