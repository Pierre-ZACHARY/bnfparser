// - `|` can be replaced by `\u007c`
// - `<` can be replaced by `\u003c`
// - `>` can be replaced by `\u003e`
// - `;` can be replaced by `\u003b`
// - `:=` can be replaced by `\u003a\u003d`


<module> ::= <declaration> <module> | ε;

<declaration> ::= <process-declaration> | <method-declaration> | <enum-declaration> | <struct-declaration>;

<enum-declaration> ::= enum <declaration-name> { <enum-name-declaration?> } ;
<enum-name-declaration?> ::= <enum-name-declaration> | ε;
<enum-name-declaration> ::= <declaration-name> ',' <declaration-name> | <declaration-name>;
<struct-declaration> ::= struct <declaration-name> { <struct-atributes-declaration?> };
<struct-atributes-declaration?> ::= <struct-atributes-declaration> | ε;
<struct-atributes-declaration> ::= <declaration-name> <type-declaration> ',' <struct-atributes-declaration> | <declaration-name> <type-declaration>;
<process-declaration> ::= process <declaration-name> ( <function-parameters-declaration*> ) <block-statement>;
<method-declaration> ::= method <declaration-name> ( <function-parameters-declaration*> ) <type-declaration?> <block-statement>;

<function-parameters-declaration*> ::= <function-parameters-declaration> ',' <function-parameters-declaration*> | <function-parameters-declaration> | ε;
<function-parameters-declaration> ::= <declaration-name> <type-declaration> ;

<type-declaration?> ::= <type-declaration> | ε;
// - `<` can be replaced by `\u003c`
// - `>` can be replaced by `\u003e`
<type-declaration> ::= ':' <type> '\u003c' <type> '\u003e' | ':' <type> ;
<type> ::= <existing-type> | <ptr-access> <existing-type> | <ptr-get> <existing-type> | <ptr-get> <mutable> <existing-type> ;

<semicolon?> ::= ';' | ε;

<block-statement> ::= '{' <statement?> '}' <semicolon?> ;

<statement?> ::= '\u007c\u007c' <statement?> | <statement> | ε;

<semicolon-statement*> ::= '\u007c\u007c' <statement?> | ';' <statement> | ε;

// \u007c = |
<statement> ::= signal <defined-by-user-variable> <semicolon-statement*>
| <block-statement> <statement?>
| if ( <boolean-operation> ) <block-statement> <statement?>
| if ( <boolean-operation> ) <block-statement> else <block-statement> <statement?>
| if ( <boolean-operation> ) <statement> else <block-statement> <statement?>
| if ( <boolean-operation> ) <statement> else <statement> <semicolon-statement*>
| if ( <boolean-operation> ) <statement> <semicolon-statement*>
| emit <variable-access> <semicolon-statement*>
| watching <variable-access> <block-statement> <statement?>
| when <variable-access> <block-statement> <statement?>
| while ( <boolean-operation> ) <block-statement> <statement?>
| var <mutable> <declaration-name> <type-declaration> <is-equal-to-attribution?> <semicolon-statement*>
| var <declaration-name> <type-declaration> <is-equal-to-attribution?> <semicolon-statement*>
| <variable-access> '=' <attribution> <semicolon-statement*>
| <ptr-get> <defined-by-user-variable> '=' <attribution> <semicolon-statement*>
| return <attribution>
| return
| <function-call> <semicolon-statement*>;

<variable-access> ::= <object-attribute-access> | <array-access> | <defined-by-user-variable> | <ptr-access> <defined-by-user-variable>;
<array-access> ::= <defined-by-user-variable> [ <expression*> ];
<object-attribute-access> ::= <defined-by-user-variable> '.' <defined-by-user-variable>;

<function-call> ::= <variable-access> ( <function-parameters*> );

<is-equal-to-attribution?> ::= '=' <attribution> | ε;
<attribution> ::= <struct-object-instanciation> | <function-call> | <arithmetic-operation> | <boolean-operation> | <array-definition> | <expression>;

<struct-object-instanciation> ::= <defined-by-user-variable> { <struct-atributes-definition?> };
<struct-atributes-definition?> ::= <struct-atributes-definition> | ε;
<struct-atributes-definition> ::= <defined-by-user-variable> ':' <attribution> ',' <struct-atributes-definition> | <defined-by-user-variable> ':' <attribution>;


<function-parameters*> ::= <attribution> ',' <function-parameter+> | <attribution> | ε;
<function-parameter+> ::= <attribution> ',' <function-parameter+> | <attribution>;

<expression> ::= <string>
| <int>
| <float>
| <bool>
| <char>
| <variable-access>
| <ptr-get> <defined-by-user-variable>
| ( <expression> );

<boolean-operation> ::= <boolean-unop> <boolean-operation>
| <comparable> <boolean-binop> <boolean-operation>
| ( <boolean-operation> )
| <comparable>;
<comparable> ::= <arithmetic-operation> | <expression>;

<arithmetic-operation> ::= ( <arithmetic-operation> ) | <arithmetic-bin-operation> | <arithmetic-unop> <arithmetic-operation> | <num>;
<arithmetic-bin-operation> ::= <num> <arithmetic-binop> <arithmetic-operation> ;
<num> ::= <float> | <int> | <function-call> | <variable-access>;


<array-definition> ::= [ <expression*> ];
<expression*> ::= <expression> ',' <expression+> | <expression> | ε;
<expression+> ::= <expression> ',' <expression+> | <expression>;

// n'importe quoi qui commence par une lettre
<declaration-name> ::= '^(?!if|while|mut|when|signal|watching|return|var|emit)[a-zA-Z_][a-zA-Z_0-9]*';
// n'importe quelle variable existante ( dont les nombres )
//<existing-name> ::= '^[a-zA-Z_0-9]*';
// n'importe quelle variable existante ( sans les nombres )
<defined-by-user-variable> ::= '^(?!if|while|mut|when|signal|watching|return|var|emit)[a-zA-Z_][a-zA-Z_0-9]*';
<existing-type> ::= '^[a-zA-Z_][a-zA-Z_0-9]*';


<string> ::= '^".*?"';
<bool> ::= true | false;
//<binop> ::= '+' | '-' | '*' | '/' | '%' | '\u003c' | '\u003e' | '\u003c' '=' | '\u003e' '=' | '=' '=' | '!' '=' | and | or;
//<unop> ::= '-' | '!';
<arithmetic-unop> ::= '-' ;
<boolean-unop> ::= '!' ;
<arithmetic-binop> ::=  '+' | '-' | '*' | '/' | '%' ;
// - `<` can be replaced by `\u003c`
// - `>` can be replaced by `\u003e`
<boolean-binop> ::=  '\u003c' | '\u003e' | '\u003c=' | '\u003e=' | '==' | '!=' | and | or;
<float> ::= '^[0-9]*[.][0-9]+';
<char> ::= "^['][a-zA-Z][']";
<int> ::= '^[0-9]+';

<ptr-access> ::= '*';
<ptr-get> ::= '&';
<mutable> ::= mut;
